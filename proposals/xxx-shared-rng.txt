Title: Computing Shared Randomness During the Tor Voting Process

0. Motivation

   For the next generation hidden services project, we need the Tor network to
   produce a fresh random value every day in such a way that it cannot be
   predicted in advance or influenced by an attacker.

   Currently, the main use case for this random value is to make the hash ring
   of HSDirs unpredictable (#8244), which should resolve a wide class of hidden
   service DoS attacks and should make it harder for people to gauge the
   popularity and activity of hidden services. Furthermore, this random value
   can also be used by other Tor-related protocols like OnioNS to introduce
   unpredictability to the protocol.

   Proposal 225 specifies a commit-and-reveal protocol that can be run as an
   external script and have the results be fed to the directory authorities.
   However, directory authority operators feel unsafe running a third-party
   script that opens TCP ports and accepts connections from the Internet.
   Hence, this proposal aims to embed the commit-and-reveal idea in the Tor
   voting process which should makes it smoother to deploy and maintain.

1. Overview

   This proposal specifies some modifications to the Tor voting process that
   allows a commit and reveal protocol to be performed without extra round
   trips.

   It also specifies how often the global randomness should be computed, and
   how it should be used by clients.

2. Specification

2.1. Design Overview

   The commit-and-reveal process aims to produce a fresh global random
   value everyday at 12:00UTC.

   Also, according to prop224, clients might need either the current
   shared random value or the shared random value from the previous
   time period. Hence, we want to have both of these values readily
   available in every consensus.

   The protocol works as follows:

   - During the voting phase at 12:00UTC every day, authorities
     include in their votes:

        (a) A fresh commitment value that will be revealed in the beginning
            of the next time period.

        (b) A reveal value that corresponds to the commitments of the
            previous time period.

        (c) The shared randomness value of the previous time period.

   - The resulting consensus at 12:00UTC should include:

        (a) The commitments sent by dirauths during the voting session.

        (b) The shared random value of the current time period. This
            is derived from the reveal values sent by the dirauths
            during the voting session.

        (c) The shared random value of the previous time period. This
            is the same shared random value that was included in the
            votes.

   - For the next 24 hours, until the next 12:00 UTC consensus,
     authorities should include in their votes the shared random value
     of this time period, and the shared random value of the previous
     time period. These values should also be included in the
     resulting consensuses, so that they are available to the clients.

   The system also has a small bootstrapping procedure that is
   described in [BOOTSTRAP].

2.2. Commit & Reveal During Voting [CRVOTING]

   An authority that wants to commit to a value during a vote, should
   generate a random 256-bit value R, and include its commitment in
   its 12:00 UTC vote as follows:

      global-rand-commitment sha256 C

   where the commitment value C is a base64-encoded SHA-256 hash of a 256-bit
   random value R.

   XXX should we make a more elaborate construction?
       like H(value | time_period_num)? why? bad rng? so?

   When the authority wants to reveal a previously commited value, it
   adds the following line to its vote at 12:00UTC:

      global-rand-reveal R'

   where the value R' is the actual value of a _previously_ commited value C'.

   XXX What happens if an authority reveals a wrong value? How do the
       other dirauths check it?

   An authority that wants to include an old shared random value in
   its vote, does it as follows:

      global-rand-value TIME_PERIOD_NUM V

   where TIME_PERIOD_NUM is the time period number that the shared
   random value is relevant for (the time period number can be
   computed as described in section TIME-PERIODS of prop224). V is the
   actual shared random value that should be used by clients and
   hidden services computed as specified in the section above.

   XXX specify what "is relevant for" means above.

2.4. Shared Randomness Calculation

   A directory authority or client who wants to derive the shared
   random value V, should use the appropriate 12:00 consensus and
   calculate V as follows:

       V = SHA256(ID_a | R_a | ID_b | R_b | ID_c | R_c | ...)

   where the ID_k value is the identity fingerprint of directory
   authority k and R_k is its corresponding reveal value for that time
   period. The inputs should be sorted in ascending order based on the
   identity fingerprint.

2.3. Shared Randomness Information in the Consensus

2.3.1. Shared Random Value in the Consensus

   Directory authorities should always include the two previous shared
   random values in the consensus; that is, the shared random value
   for the current time period and the one of the previous time
   period. These values are included in every consensus so that
   clients can learn the current shared random values even if they
   don't have the 12:00UTC consensus.

   In the consensus, shared random values should be included in the
   following format:

         global-rand-value TIME_PERIOD_NUM V

   with the same format as specified in section [CRVOTING]

   To maintain consistent ordering, the shared random values of the
   previous time period should be listed before the values of the
   current time period.

2.3.2. Commitments in the Consensus

   When computing the 12:00UTC consensus, directory authorities should
   have included their commitments and reveals for that period in
   their 12:00UTC votes.

   To avoid attacks where a malicious authority sends different
   commitment values to different authorities. we always use the
   opinion of the majority on which commitments values should be
   active.

   To do that, in every 12:00UTC consensus, authorities include all
   the commitments they received. By doing this, the resulting
   consensus will include the majority's opinion on the received
   commitments. Attacks where a malicious authority tries to stop the
   12:00UTC consensus from being created entirely are discussed in the
   security section.

   XXX should we include all the commitments we receive in the consensus?
       or the union of all commitments seen in votes from all dirauths?

   A commitment should be placed in the consensus using the following format:

     global-rand-commitment TIME_PERIOD_NUM ID C

   where ID is the identity fingerprint of the directory authority and
   C is the commitment of that directory authority.

   To maintain consistent ordering, commitment values should be sorted
   in ascending order based on their directory authority ID.

2.5. Bootstrapping [BOOTSTRAP]

   Commit-and-reveal systems work in 3 steps, whereas the voting
   process of Tor has 2 steps, hence the system requires a small
   bootstrapping phase of two days.

   When this system first gets deployed, authorities will not have any
   values to reveal so they will only issue commitments. For this
   reason, authorities MUST be able to handle votes that only have
   commitment entries.

   Also, authorities who restart between the commit and reveal phases,
   MAY lose their state and not issue any reveal lines.  So,
   authorities MUST also be able to handle the case where an authority
   has commited in the past, but does not follow up with a reveal.

   XXX Don't we lose the opportunity to detect abort attacks then?

   Furthermore, two shared random values are required for the HSDir
   overlay periods to work properly as specified in prop224. Hence
   clients MUST NOT use the randomness of this system till it has
   bootstrapped completely; that is, until two shared random values
   are included in every consensus. This should happen after three
   12:00UTC consensuses has been produced which takes 48 hours.

3. Security Analysis

   XXX what happens if only a few dirauths vote?

4. Discussion

5. Appendix

XXX If commit-reveal fails, consensus should happen

XXX What happens if a dirauth receives contains commitment that the other dirauth didn't?

5.1. Example commitments/reveals in the consensus


   XXX update this

   Let's say we are about to enter time period 180. The consensus
   needs to include three pieces of information:

   - The reveal values of the previous time period (179). These should
     be ued by clients and hidden services that need to compute the
     previous shared random value.

   - The reveal values for this time period (180) which correspond to
     commitment values of the previous time period. These should be
     used to calculate the shared random value for this time period.

     XXX how are authorities going to get the old commitments?

   - The commitment values for this time preiod (180), which will be
     revealed in the beginning of time period 181.

   After the appropriate ordering (as specified in the last paragraph
   of the section above) they will look like this in the consensus:

	   received-reveal 179 14C131DFC5C6F93646BE72FA1401C02A8DF2E8B4 87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7
	   received-reveal 179 23D15D965BC35114467363C165C4F724B64B4F66 0263829989b6fd954f72baaf2fc64bc2e2f01d692d4de72986ea808f6e99813f
	   received-reveal 179 49015F787433103580E3B66A1707A00E60F2D15B 0433e993a3dbc505d6e5cad972a1df0ab189cfe7ceece5e94fd47ca9a074370f
	   received-reveal 179 585769C78764D58426B8B52B6651A5A71137189A 13c1dc569ae4a0d7f90d8f83d22fc9c8fa526e133f8fea0f9526c8533c4d8da3

       received-reveal 180 14C131DFC5C6F93646BE72FA1401C02A8DF2E8B4 d6ba4fb19951b0a0175af857ec4891947aaf65d7de043c48a38b2daf2df0a329
	   received-reveal 180 23D15D965BC35114467363C165C4F724B64B4F66 6fc16b03d8c15b9885876848a301a01816cccaf7b48e74f2b51db99c007a3bd5
	   received-reveal 180 49015F787433103580E3B66A1707A00E60F2D15B d867d3f88fa20d7cb936ecd93651adeedf473a6177218cd0987f462ff5511cb6
	   received-reveal 180 585769C78764D58426B8B52B6651A5A71137189A 969eeff1eaac226a228cc61503effa46ea87d872ef3174365befc7c36ffa3c48

       received-commitment 181 14C131DFC5C6F93646BE72FA1401C02A8DF2E8B4 d93844f8f37e55564be3f194656bf33b5d0fb5e589a0fe17eb7c2d4e8593ec9c
	   received-commitment 181 23D15D965BC35114467363C165C4F724B64B4F66 4960a9ce196ee53a9ae6f2b038ebf5bb7949312406eabe79835e766b4a3d0d88
	   received-commitment 181 49015F787433103580E3B66A1707A00E60F2D15B 7e332bcee418f7d700927c946d36341f0651d6d90997b58d3d5441dec96b2e74
	   received-commitment 181 585769C78764D58426B8B52B6651A5A71137189A d2b6d0723608af24de1b526a7cb97148f191bc951fe632dea5d89f1ff3407fea
