Filename: xxx-commit-reveal-consensus.txt
Title: Random Number Generation  During Tor Voting
Authors: David Goulet, George Kadianakis
Created: 2015-07-16
Status: Draft

1. Introduction

1.1. Motivation

   For the next generation hidden services project, we need the Tor network to
   produce a fresh random value every day in such a way that it cannot be
   predicted in advance or influenced by an attacker.

   Currently we need this random value to make the HSDir hash ring
   unpredictable (#8244), which should resolve a wide class of hidden
   service DoS attacks and should make it harder for people to gauge
   the popularity and activity of target hidden services. Furthermore,
   this random value can be used by other Tor-related protocols (or
   even non-Tor-related) like OnioNS to introduce unpredictability to
   the protocol.

1.2. Previous work

   Proposal 225 specifies a commit-and-reveal protocol that can be run
   as an external script and have the results be fed to the directory
   authorities.  However, directory authority operators feel unsafe
   running a third-party script that opens TCP ports and accepts
   connections from the Internet.  Hence, this proposal aims to embed
   the commit-and-reveal idea in the Tor voting process which should
   makes it smoother to deploy and maintain.

   Another idea proposed specifically for Tor is Nick Hopper's "A
   threshold signature-based proposal for a shared RNG" which was
   never turned into an actual Tor proposal.

2. Specification

   This proposal alters the Tor consensus protocol so that a random
   number is generated by the directory authorities during the voting
   process. The distributed random generator scheme is based on a
   commit-and-reveal technique.

   The proposal also specifies how the final shared random value is
   embedded in consensus documents so that clients who need it can get
   it.

2.1. Protocol Description

   The commit-and-reveal protocol aims to produce a fresh shared
   random value everyday at noon UTC. The fresh random value is
   embedded in the consensus document of 12:00UTC.

   In short, the protocol works as follows:

   - During the voting phase at 12:00UTC every day, authorities in
     their votes commit to a fresh random value and reveal the
     previous one.

     Specifically, authorities include in their votes:

        (a) A fresh commitment value (that will be revealed at
            12:00UTC of the next day).

        (b) The reveal value for the commitment from 12:00UTC yesterday.

   - After the voting is done and the authorities have sent their
     reveal values, the authorities verify that all the commitments
     from 24 hours ago were honest. If so, the authorities compute the
     shared random value of the day using all the received reveal
     values, and publish it to the consensus.

     Furthermore, all consensus documents every day need to include
     the shared random value of the day, as well as the shared random
     value of the previous day. That's because either of these values
     might be needed at a given time for a Tor client to access a
     hidden service according to section [TIME-OVERLAP] of Proposal
     224.

     Specifically, the resulting consensus at 12:00UTC must include:

        (a) All the commitments sent by dirauths during the voting
            session.

        (b) The shared random value of the current time period. This
            is derived from the reveal values sent by the dirauths
            during the voting session.

        (c) The shared random value of the previous time period. This
            is the same shared random value that was included in the
            votes.

   This concludes the commit-and-reveal procedure at noon everyday.

   For the next 24 hours, up until the next 12:00 UTC consensus,
   authorities must include in the consensus the commitment values,
   the shared random value of this time period, and the shared random
   value of the previous time period so that they are readily
   available for clients.

   The system also has a small bootstrapping procedure that is
   described in [BOOTSTRAP].

   The sections to come explain the above procedure and specify how
   that information will be encoded into votes and consensuses.

2.2. Commit & Reveal During Voting [CRVOTING]

   During the 12:00UTC voting session, directory authorities include
   in their vote a fresh commitment value that will be revealed in 24
   hours. They also reveal their commitment value from 24 hours ago.

2.2.1. Encoding commitments in votes

   An authority that wants to commit to a value during a vote, should
   generate a random 256-bit value R, and include its commitment in
   its 12:00 UTC vote as follows:

      global-rand-commitment sha256 C

   where the commitment value C is a base64-encoded SHA-256 hash of R.
   The value C is constructed as follows:

      C = base64-encode( SHA256(TIME_PERIOD_NUM | R) )

   where TIME_PERIOD_NUM is the current time period number (the time
   period number can be computed as described in section TIME-PERIODS
   of prop224).

2.2.2. Encoding reveals in votes

   When the authority wants to reveal a previously commited value, it
   adds the following line to its vote at 12:00UTC:

      global-rand-reveal sha256 C R

   where C is the commited value described in the previous section and R
   is its actual random value base64-encoded.

   To verify the revealed value, the TIME_PERIOD_NUM is needed to
   reconstruct C has detailed in section 2.2.1.

2.2.3. Vote validation

   When a 12:00UTC vote is received that includes reveal values, the
   other dirauths need to check that the reveal values match the old
   commitments by that dirauth from 24 hours ago.

   An authority that committed to value that does not match the
   revealed value, MUST be ignored during the shared randomness
   calculation (its reveal values should not be considered).

   Furthermore, directory authorities MUST NOT derive a new shared
   random value if less than 3 authorities revealed values on a round.

2.3. Shared Randomness Calculation [SRCALC]

   When directory authorities receive all the reveal values during the
   12:00UTC voting session, they must generate the shared random value
   for that period. A directory authority that wants to derive the
   shared random value V, should use the appropriate reveal values for
   that time period and calculate V as follows:

       V = SHA256(TIME_PERIOD_NUM | ID_a | R_a | ID_b | R_b | ...)

   where the ID_k value is the identity fingerprint of directory
   authority k and R_k is its corresponding reveal value of that
   authority for that time period.

2.4. Shared Randomness Information in the Consensus

   Authorities add the following information to the consensus:

   - A list of all the commitments received during the previous
     commit-and-reveal session.

     This is done to avoid attacks where a malicious authority sends
     different commitment values to different authorities. By
     transcribing the received commitments in the consensus we always
     use the opinion of the majority on which commitments values
     should be active.

     These commitments get updated in every 12:00UTC consensus, but
     are carried intact in all the other consensuses.

   - The shared random value for the current time period, calculated
     as specified in section [SRCALC].

   - The shared random value for the previous time period. This has
     already been calculated.

   XXX what happens if a dirauth reboots in the evening? should it
       start echoing the shared random value included in the
       consensus, or should it wait till the next 12:00UTC?

2.4.1. Shared Random Value in the Consensus

   In the consensus, shared random values should be included in the
   following format:

         global-rand-value TIME_PERIOD_NUM V

   where V is the actual shared random value that should be used by
   clients. It's computed as specified in the section [SRCALC].

   To maintain consistent ordering, the shared random values of the
   previous time period should be listed before the values of the
   current time period.

   XXX What happens if a 12:00UTC consensus is missed and dirauths
       need to keep on advertising the old shared random value?
       should a new TIME_PERIOD_NUM be used for the old values?

   XXX I do think that the TIME_PERIOD_NUM should be incremented and we
   simply carry on the old V values. --dgoulet

2.4.2. Commitments in the Consensus

   A commitment should be placed in the consensus using the following
   format:

     global-rand-commitment TIME_PERIOD_NUM ID C

   where ID is the identity fingerprint of the directory authority and C
   is the commitment of that directory authority. See section [CRVOTING]
   that details how C is computed.

   To maintain consistent ordering, commitment values should be sorted
   in ascending order based on their directory authority ID.

2.5. Bootstrapping [BOOTSTRAP]

   Commit-and-reveal systems work in 3 steps, whereas the voting
   process of Tor has 2 steps, hence the system requires a small
   bootstrapping phase of two days.

   When this system first gets deployed, authorities will not have any
   values to reveal so they will only issue commitments. For this
   reason, authorities MUST be able to handle votes that only have
   commitment entries.

   Also, authorities who reboot between the commit and reveal phases,
   may lose their state and not be able to issue any reveal lines.  So,
   authorities MUST also be able to handle the case where an authority
   has commited in the past, but does not follow up with a reveal.

   XXX Don't we lose the opportunity to detect abort attacks then?
       See section [STOREREVEAL] for possible solution.

   Furthermore, two shared random values are required for the HSDir
   overlay periods to work properly as specified in prop224. Hence
   clients MUST NOT use the randomness of this system till it has
   bootstrapped completely; that is, until two shared random values
   are included in every consensus. This should happen after three
   12:00UTC consensuses have been produced, which takes 48 hours.

2.6. If The Consensus At 12:00UTC Does Not Happen

  If the consensus at 12:00UTC fails to be created, then there will be
  no new shared random value for the day.

  Directory authorities should keep including the old shared random
  values in the consensus till the next 12:00UTC commit-and-reveal
  session.

  Clients should keep on using the old shared random values.

  Security issues with this design are discussed in section [SABOTAGE].

3. Security Analysis

3.1. Security of commit-and-reveal and future directions

  The security of commit-and-reveal protocols is well understood, and
  has certain flaws. Basically, the protocol is insecure to the extent
  that an adversary who controls b of the authorities gets to choose
  among 2^b outcomes for the result of the protocol. However, an
  attacker who is not a dirauth should not be able to influence the
  outcome at all.

  We believe that this system offers sufficient security especially
  compared to the current situation. More secure solutions require
  much more advanced crypto and more complex protocols so this seems
  like an acceptable solution for now.

3.3. A single dirauth can sabotage the 12:00UTC consensus... [SABOTAGE]

  Because of the architecture of this feature, it's worth mentioning
  that this proposal provides yet another way for a single dirauth to
  sabotage a consensus from happening. For example, a dirauth can
  produce multiple votes with different commitment values, and send
  them to different authorities. The authorities will then produce a
  different consensus, and none of them will be able to collect enough
  signatures. Various such attacks can be devised even with the
  current voting system.

3.2. and unfortunately the 12:00UTC consensus is very important

  With this proposal, the 12:00UTC consensus is now special, since
  it's the only one where the commit-and-reveal protocol is performed.

  This will be an entirely new mechanic to the Tor consensus system,
  that has various problems.  If the 12:00UTC consensus is stopped
  from happening, then no shared randomness will be produced for this
  time period.

  While this is a big issue, we think it's acceptable for now, since
  the sabotage of a 12:00UTC consensus is detectable.  Also, prop243
  raised the requirement for being an HSDir to "Stable", which means
  that an adversary needs to park her relay multiple days on the
  network before they become an HSDir. This means that a malicious
  authority will need to sabotage multiple 12:00UTC consensuses in a
  row, to be able to insert its own relays to the hash ring. If this
  proposal gets deployed, we suggest special monitoring for the
  12:00UTC consensus using the consensus-health monitoring suite.

  A way to avoid this would be to do commit-and-reveal on every
  consensus, since commiting and revealing is a cheap procedure
  computationally. This might be useful since it can provide fallback
  randomness, in case the 12:00UTC consensus gets sabotaged.

  If we decide to do that then we need to specify which shared
  randomness values clients should use at any time (since different
  clients can have different consensuses) and how many shared random
  values each consensus should contain. This seems nontrivial.

4. Discussion

4.2 Dirauths save their reveal values on disk? [STOREREVEAL]

  This proposal doesn't mandate a directory authority to save its
  revealed value on disk. The potential of saving it on disk would
  allow a possible recovery in case of reboot. That is the authority
  could read the saved value and use it at the next 12h00UTC voting.

4.3 Why the added complexity from proposal 225?

  The complexity difference between this proposal and prop225 is in
  part because prop225 doesn't specify anything on how the shared
  random value gets to the client.

  This proposal instead spends lots of effort specifying how the two
  shared random values can always be readily accessible to clients.

4.4 Shared random or revealed values in the consensus

  The current approach is to publish only the shared random value in
  the consensus. However, we could also publish the revealed values
  instead and let the clients compute the shared random value.

  We chose to not take this approach because if we assume that a
  client sees the consensus as trustable entity, it means that if the
  revealed values are voted correctly, the resulting shared random is
  trustable.

   Also, publishing only the shared random in the consensus adds two
   extra lines in the consensus (current and previous shared random)
   instead of N*2 lines of revealed values where N is the amount of
   directory authorities.

4.5. Why not make a new document for this thing?

   Another way to achieve the goals of this propoposal, would be to
   create an entirely new directory document and voting procedure that
   is only used every 24 hours for shared randomness derivation.

   This would simplify things since that new document does not need to
   be recomputed every hour like the consensus. Instead, it would only
   need to be changed every 24 hours or in any arbitrary time
   period. This is a bit similar to what prop225 does.

   This would also separate the consensus document from the random
   number generation procedure, which might be cleaner since bugs in
   one procedure would not influence the other.

   We decided to not take this approach in this proposal, because of
   the additional engineering cost of introducing a new directory
   document, specifying how the voting will happen, getting it cached
   by directory caches and introducing new logic for clients to fetch
   it.

   An alternative design, is to treat the 12:00UTC consensus as a
   special document, and make a special URL for it so that clients can
   use to fetch it (/tor/rendezvous/shared_rand_consensus or something).
   This means that we don't need to include any shared randomness
   information in the non-12:00UTC consensuses. It's still a bit awkward
   for clients to use outdated consensuses though.

5. Appendix

XXX also provide examples for voting and for non-12:00UTC consensus??

5.1. Example commitments/reveals in the consensus


   Let's say we are about to enter time period 180. The 12:00UTC
   consensus needs to include three pieces of information:

   - All the commitment values for this time period, which will be
     revealed in the beginning of time period 181.

   - The shared random value for this time period (180).

   - The shared random value of time period 179.

   After the appropriate ordering they might look like this in the
   consensus:

       global-rand-commitment 181 14C131DFC5C6F93646BE72FA1401C02A8DF2E8B4 d93844f8f37e55564be3f194656bf33b5d0fb5e589a0fe17eb7c2d4e8593ec9c
	   global-rand-commitment 181 23D15D965BC35114467363C165C4F724B64B4F66 4960a9ce196ee53a9ae6f2b038ebf5bb7949312406eabe79835e766b4a3d0d88
	   global-rand-commitment 181 49015F787433103580E3B66A1707A00E60F2D15B 7e332bcee418f7d700927c946d36341f0651d6d90997b58d3d5441dec96b2e74
	   global-rand-commitment 181 585769C78764D58426B8B52B6651A5A71137189A d2b6d0723608af24de1b526a7cb97148f191bc951fe632dea5d89f1ff3407fea

       global-rand-value 180 d6ba4fb19951b0a0175af857ec4891947aaf65d7de043c48a38b2daf2df0a329

	   global-rand-value 179 6fc16b03d8c15b9885876848a301a01816cccaf7b48e74f2b51db99c007a3bd5

